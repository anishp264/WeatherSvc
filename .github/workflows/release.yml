name: CI/CD Pipeline

on: push
#on: pull_request

env:
    IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/weather_svc_image

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install Docker
      run: |
        sudo apt-get update
        sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
        sudo apt-get update
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io

    - name: Test Docker Installation
      run: |
        docker --version

    #- name: Show Contents
      #run: cat Config.xml

    #- name: Copy config.xml
      #run: cp Config.xml NuGet.Config

    #- name: Show NuGet Contents
      #run: cat NuGet.Config

    - name: Debugging information
      run: |
        which docker
        docker --version
        env

    - name: Build the Docker image
      run: sudo docker build -t weathersvctestdocker -f Dockerfile .

    - name: Run tests in Docker
      run: sudo docker run --name weathersvc-test-container weathersvctestdocker

    - name: Copy coverage report from Docker to host
      run: |
        mkdir -p ${{ github.workspace }}/coverage
        sudo docker cp weathersvc-test-container:/app/tests/TestResults/ ${{ github.workspace }}/coverage

    - name: Install ReportGenerator
      run: sudo dotnet tool install -g dotnet-reportgenerator-globaltool

    - name: Generate Code Coverage Report
      run: |
        reportgenerator \
        "-reports:${{ github.workspace }}/coverage/*.trx" \
        "-targetdir:${{ github.workspace }}/coverage/report" \
        -reporttypes:Html

    - name: Upload coverage report as artifact
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: coverage-report
        path: ${{ github.workspace }}/coverage/report

  build_and_publish:
    needs: build_and_test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build the WeatherSvcApi Docker image
      run: |
        cd WeatherSvcApi
        docker build -t ${{ env.IMAGE_NAME }} -f Dockerfile .

    - name: Push the Docker image to Docker Hub
      run: docker push ${{ env.IMAGE_NAME }}

  
