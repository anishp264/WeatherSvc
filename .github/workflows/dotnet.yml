name: .NET

on: push
#on: pull_request

env:
    IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/weather_svc_image

jobs:
    build:
  
      runs-on: ubuntu-latest
        #self-hosted
  
      steps:
      - name: Delete WeatherSvc Directory
        run: |
          if [ -d "coverage" ]; then
            sudo rm -rf coverage
          fi   
          
      - name: Checkout Code
        uses: actions/checkout@v3
      
    #  - name: Install .NET SDK
    #    run: |
    #      sudo apt-get update
    #      sudo apt-get install -y apt-transport-https
    #      sudo apt-get update
    #      sudo apt-get install -y dotnet-sdk-7.0

      - name: Setup .NET
        run: |
            sudo wget https://dot.net/v1/dotnet-install.sh
            sudo chmod +x dotnet-install.sh
            sudo ./dotnet-install.sh --channel 6.0

      - name: Restore dependencies
        run: dotnet restore
        
      - name: Build
        run: dotnet build --no-restore
        
      # Add coverlet.collector nuget package to test project - 'dotnet add <TestProject.cspoj> package coverlet
      - name: Test
        run: dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura
        #run: dotnet test --no-build --verbosity normal --collect:"XPlat Code Coverage" --logger trx --results-directory coverage

      - name: List files
        run: ls -l

      - name: Code Coverage Summary Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: 'coverage/*/coverage.cobertura.xml'
          badge: true
          format: 'markdown'
          output: 'both'

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          recreate: true
          path: code-coverage-results.md
    
      - name: Write to Job Summary
        run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY

      - name: Create code coverage report
        run: |
          if ! dotnet tool list --global | grep -q 'dotnet-reportgenerator-globaltool'; then
            echo "dotnet-reportgenerator-globaltool is not installed. Installing..."
            dotnet tool install -g dotnet-reportgenerator-globaltool
          else
            echo "dotnet-reportgenerator-globaltool is already installed."
          fi
          #dotnet tool install -g dotnet-reportgenerator-globaltool
          reportgenerator -reports:coverage/*/coverage.cobertura.xml -targetdir:CodeCoverage -reporttypes:'MarkdownSummaryGithub;Cobertura;Html'
  
      - name: Write to Job Summary
        run: cat CodeCoverage/SummaryGithub.md >> $GITHUB_STEP_SUMMARY

      - name: Upload coverage report as artifact
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage-report
          path: CodeCoverage/

    publish:    
      needs: build
      runs-on: self-hosted

      steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Docker
        run: |
          if ! command -v docker &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io
          else
            echo "Docker is already installed."
          fi

      - name: Test Docker Installation
        run: |
          docker --version

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build the WeatherSvcApi Docker image
        run: |
          cd WeatherSvcApi
          docker build -t ${{ env.IMAGE_NAME }} -f Dockerfile .

      - name: Push the Docker image to Docker Hub
        run: docker push ${{ env.IMAGE_NAME }}
